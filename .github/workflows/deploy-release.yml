on:
  release:
    types:
      - published
name: Deploy released binaries
jobs:
  deploy_linux_binaries:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          profile: minimal
      - uses: Swatinem/rust-cache@v2.2.1
      - run: cargo build --release --bin annis --bin graphannis-webservice --lib
      - run: ls target/release
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - uses: octokit/request-action@v2.x
        id: get_release
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/${{env.RELEASE_VERSION}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo "::set-output name=url::$url"
        env:
          response: ${{ steps.get_release.outputs.data }}
      - name: Upload graphANNIS shared library
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.get_upload_url.outputs.url}}
          asset_path: ./target/release/libgraphannis_capi.so
          asset_name: libgraphannis.so
          asset_content_type: application/x-sharedlib
      - name: Upload graphANNIS CLI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.get_upload_url.outputs.url}}
          asset_path: ./target/release/annis
          asset_name: annis
          asset_content_type: application/x-sharedlib
      - name: Upload graphANNIS webservice
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.get_upload_url.outputs.url}}
          asset_path: ./target/release/graphannis-webservice
          asset_name: graphannis-webservice
          asset_content_type: application/x-sharedlib
  deploy_windows_binaries:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          profile: minimal
      - uses: Swatinem/rust-cache@v2.2.1
      - name: Set release version
        run: |
          $version = $env:GITHUB_REF.replace('refs/tags/', '')
          echo "RELEASE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - uses: octokit/request-action@v2.x
        id: get_release
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/${{env.RELEASE_VERSION}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: get_upload_url
        run: |
          $found = "$env:response" -match '"upload_url": "([^"]*)",'
          $url = $matches[1]
          echo "ASSET_UPLOAD_URL=$url" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        env:
          response: ${{ steps.get_release.outputs.data }}
      - run: cargo build --release --bin annis --bin graphannis-webservice --lib
      - run: dir target/release
      - name: Upload graphANNIS shared library
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{env.ASSET_UPLOAD_URL}}
          asset_path: ./target/release/graphannis_capi.dll
          asset_name: graphannis.dll
          asset_content_type: application/x-dosexec
      - name: Upload graphANNIS CLI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{env.ASSET_UPLOAD_URL}}
          asset_path: ./target/release/annis.exe
          asset_name: annis.exe
          asset_content_type: application/x-dosexec
      - name: Upload graphANNIS webservice
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{env.ASSET_UPLOAD_URL}}
          asset_path: ./target/release/graphannis-webservice.exe
          asset_name: graphannis-webservice.exe
          asset_content_type: application/x-dosexec
  deploy_macos_binaries:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          profile: minimal
      - uses: Swatinem/rust-cache@v2.2.1
      - run: cargo build --release --bin annis --bin graphannis-webservice --lib
      - run: ls target/release
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - uses: octokit/request-action@v2.x
        id: get_release
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/${{env.RELEASE_VERSION}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo "::set-output name=url::$url"
        env:
          response: ${{ steps.get_release.outputs.data }}
      - name: Upload graphANNIS shared library
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.get_upload_url.outputs.url}}
          asset_path: ./target/release/libgraphannis_capi.dylib
          asset_name: libgraphannis.dylib
          asset_content_type: application/x-mach-binary
      - name: Upload graphANNIS CLI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.get_upload_url.outputs.url}}
          asset_path: ./target/release/annis
          asset_name: annis.osx
          asset_content_type: application/x-mach-binary
      - name: Upload graphANNIS webservice
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.get_upload_url.outputs.url}}
          asset_path: ./target/release/graphannis-webservice
          asset_name: graphannis-webservice.osx
          asset_content_type: application/x-mach-binary
  deploy_documentation:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Get the release version from the GITHUB_REF variable as new SHORT_VERSION variable
        run: echo "SHORT_VERSION=$(echo ${GITHUB_REF} | sed -E 's/^refs\/heads\/.*/develop/' | sed -E 's/^(refs\/tags\/v)?(.*)(\.[0-9]+\.[0-9]+)$/\2/')" >> $GITHUB_ENV
      - run: misc/download-mdbook.sh 0.3.5
        env:
          OS_NAME: linux
      - name: Generate the documentation
        run: mdbook build --dest-dir book/v${SHORT_VERSION} docs/
      - run: git clone -q  -b gh-pages https://github.com/$GITHUB_REPOSITORY gh-pages
      - name: Remove old files for this version
        run: rm -Rf gh-pages/docs/v$SHORT_VERSION
      - name: copy the documentation content
        run: cp -R docs/book/* gh-pages/docs/
      - run: git add docs/v$SHORT_VERSION
        working-directory: gh-pages
      - run: git -c user.name='gh-actions' -c user.email='gh-actions' commit --allow-empty -m "add documentation for version $SHORT_VERSION"
        working-directory: gh-pages
      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          directory: gh-pages
          branch: gh-pages
